day06

0. 복습


1) 데이터프레임 연결
- pd.concat(데이터프레임 리스트)
- 옵션
	1) axis = 0, axis = 1
	2) ignore_index = True
	3) join = "outer", "inner"

2) 데이터프레임 결합(병합)
- pd.merge(df_left, df_right) : 특정 열(key)을 기준으로 두 데이터프레임을 병합
- 옵션
	1) how 옵션: "inner", "outer", "left", "right"
	2) on 옵션: 병합의 기준(key)를 설정하는 옵션
	3) left_on, right_on

3) 데이터프레임 결합
- df1.join(df2) : 두 데이터프레임(df1, df2)을 행 인덱스를 기준으로 결합
- merge() : 작동방식이 비슷하다.


1. 그룹 연산
- 데이터를 특정 기준에 따라 여러 그룹으로 나눠야 할 때 사용
- 특정 기준을 적용하여 몇 개의 그룹으로 데이터를 분할하여 처리하는 것을 그룹 연산이라고 한다.
- 그룹 연산을 3단계의 과정으로 진행한다.
	1단계) 분할(split): 데이터를 특정 조건에 의해 분할
	2단계) 적용(apply): 데이터를 집계, 변환, 필터링 하는데 필요한 메소드 적용
	3단계) 결합(combine): 2단계까지의 처리 결과를 하나로 합침
	

1) 그룹 객체 만들기(분학 단계)
- df.groupby(기준이 되는 열): 데이터프레임을 특정 열을 기준으로 분할하여 그룹 객체를 반환한다.
- 기준이 되는 열은 1개도 가능하고, 여러 개일 경우 리스트 형태로 입력할 수 있다.
- 데이터프레임을 그룹화하면 기준 열의 값(key)들과 분할된 데이터프레임이 한 쌍의 튜플형태로 반환된다.
- 그룹객체.get_group(key): 특정 그룹 추출



2) 그룹 연산 메소드(적용-결합 단계)
(1) 데이터 집계
- 각 그룹별로 통계 함수를 적용한 것처럼, 그룹 객체에 다양한 함수를 적용하는 과정
- 사용자 정의 함수를 그룹 객체에 적용하기 위해서는 agg() 메소드를 사용한다.
	그룹객체.agg(매핑함수)
	여러개의 함수를 사용하여 각 그룹별로 집계 연산을 처리할 수 있다.
	- 모든 열에 여러 함수 매핑: 그룹객체.agg([함수1, 함수2, ...])
	- 각 열마다 다른 함수 매핑: 그룹객체.agg({"열1":"함수1", "열2":["함수2", "함수3"]})
- 그룹객체.transform(함수이름)
	- agg() 와의 차이점: agg() 메소드는 각 그룹별로 함수의 연산 결과를 집계하여 반환한다.
	- transform() 메소드는 그룹별로 함수를 적용하는 것은 agg()와 비슷하지만
	- 그룹별로 집계하지 않고 본래 데이터 프레임의 행과 열을 기준으로 결과를 반환한다.
	


(2) 그룹 객체










































