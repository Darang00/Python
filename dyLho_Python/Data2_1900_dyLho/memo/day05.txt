day05

스칼라, 벡터, 매트릭스


1) 스칼라
 - 정수나 실수처럼 하나의 물리량을 표시

2) 벡터
 - 크기와 방향을 가진 하나의 수의 집합
 - 스칼라에 방향이라는 속성이 추가됨
 - 넘파이에서 벡터는 한 개의 행이나 열을 가진 배열로 표현됨
 - 노름 (norm) : 벡터의 크기, 시작점 ~ 끝점 선분 거리
	np.linalg.norm(vector)

3) 매트릭스
 - 행과 열이 있는 데이터
 - 행을 기준으로 벡터를 쌓거나 열로 벡터를 쌓아서 만들어지는 구조

배열의 데이터 타입

숫자형(정수형, 실수형, 복소수형)
문자열
논리형

배열의 기본 함수
(1) np.arange(시작값, 종료값, 스텝값) : 특정 범위에 있는 원소를 자동으로 생성
				(연속성 정수/실수 생성)
(2) np.astype() : 배열의 원소가 가지는 유형을 바꾸는 함수
(3) np.zeros((행, 렬)): 0으로만 이루어진 배열 생성
(4) np.ones((행, 렬)): 1로만 이루어진 배열 생성


배열 요소 추가, 수정, 삭제
(1) 배열 요소 추가
np.append(배열1, 배열2, 축): 배열1에 배열2를 이어붙이는 함수
(2) 배열 요소 수정
	배열명[idx] = 값

(3) 배열 요소 삭제
	np.delete(배열, index, axis)


배열의 사칙연산
: 같은 자리의 원소끼리 사칙 연산
크기가 서로 다른 배열끼리 사칙연산: 브로드캐스팅


1. 배열 요소 재배치 함수
(1) np.transpose(): 행과 열을 바꾸는 함수
(2) 배열.reshape(행의 개수, 열의 개수): 배열을 지정한 형태로 변환


2. 배열 기본 통계 함수
(1) 배열.sum(): 지정된 축을 따라서 배열 요소의 합계를 반환
(2) 배열.max(): 지정된 축을 따라 배열 요소 중 최대값 반환
(3) 배열.min(): 지정된 축을 따라 배열 요소 중 최소값 반환
(4) 배열.cumsum(): 지정된 축을 따라 배열 요소의 누적 합을 반환
(5) 배열.mean(): 지정된 축을 따라 배열 요소의 평균 반환


배열의 행렬 계산
: numpy 에서는 단순 산술 연산 뿐만 아니라 행렬 연산도 가능하다.
- 행렬 곱 연산(dot product) 
	(1) 배열1 @ 배열2
	(2) 배열1.dot(배열2)
	(3) np.linalg(배열1, 배열2)
	(4) 배열1 행렬의 행과 배열2 행렬의 열의 개수가 일치해야 연산 가능

- 역행렬 (inverse matrix)
	(1) 기존의 행렬과 행렬곱하면 단위 행렬이 나오는 행렬(역수와 같은 개념)
	(2) 단위 행렬: 행과 열의 인덱스가 같은 부분만 1, 나머지는 0인 행렬
	(3) np.linalg.inv(배열)

- 행렬식(determinant)
	(1) 역행렬을 구할 때
	(2) 행렬식이 0인 행렬은 역행렬을 구할 수 없다.
	(3) np.linalg.det(배열)




배열의 난수 생성
- random.rand(): 0.0 ~ 1.0 미만 범위에서 주어진 형태의 난수 배열을 생성
- random.randint(): 지정한 범위에서 임의의 정수로 구성된 배열 생성
- random.choice(배열): 인수로 전달된 1차원 배열로부터 임의의 배열을 생성
 

넘파이 삼각함수
: numpy는 삼각함수를 적용한 값을 얻어낼 수 있다.
- 삼각함수: 직각삼각형으로 삼각비를 구하는 함수
	(1) 사인(np.sin()): 높이 / 빗변
	(2) 코사인(np.cos()): 밑변 / 빗변
	(3) 탄젠트(np.tan()): 높이 / 밑변

- 수학은 각도의 값을 삼각비로 표현하지만, 넘파이에서는 라디안을 기준으로 표현(호도법)\
	1 radian = 180 / π => π/180 radian => np.radians()

 


























 













